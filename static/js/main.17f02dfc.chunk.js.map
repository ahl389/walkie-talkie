{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Device","require","App","props","state","identity","status","ready","authorized","password","connect","bind","disconnect","onChangeUpdateState","typePassword","authorize","setup","device","this","setState","on","connection","accept","recipient","disconnectAll","event","preventDefault","fetch","process","then","response","json","data","accessToken","audio","incoming","outgoing","catch","err","console","log","target","value","className","onMouseDown","onMouseUp","onSubmit","type","onChange","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.17f02dfc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nconst { Device } = require('twilio-client');\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state={\n      identity: '',\n      status: '',\n      ready: false,\n      authorized: false,\n      password: ''\n    }\n\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.onChangeUpdateState = this.onChangeUpdateState.bind(this);\n    this.typePassword = this.typePassword.bind(this);\n    this.authorize = this.authorize.bind(this);\n    this.setup = this.setup.bind(this);\n  }\n\n  componentDidMount() {\n    const device = new Device();\n\n    this.setState({\n      device: device\n    })\n\n    device.on('incoming', connection => {\n      connection.accept();\n\n      this.setState({\n        status: \"call incoming\"\n      });\n    });\n\n    device.on('ready', device => {\n      this.setState({\n        status: \"online\",\n        ready: true\n      });\n    });\n\n    device.on('connect', device => {\n      this.setState({\n        status: \"connected\"\n      });\n    });\n\n    device.on('disconnect', device => {\n      this.setState({\n        status: \"disconnected\"\n      });\n    });\n  }\n\n  connect() {\n    this.state.device.connect({recipient: this.state.recipient})\n    this.setState({status: 'calling'})\n  }\n\n  disconnect(recipient) {\n    this.state.device.disconnectAll()\n  }\n\n  setup(event) {\n    event.preventDefault();\n\n    fetch(`${process.env.REACT_APP_API_BASE}/token?identity=${this.state.identity}`)\n      .then(response => response.json())\n      .then(data => {\n        this.state.device.setup(data.accessToken);\n        this.state.device.audio.incoming(false);\n        this.state.device.audio.outgoing(false);\n        this.state.device.audio.disconnect(false);\n\n        this.setState({\n          status: 'online',\n          recipient: this.state.identity == 'friend1' ? 'friend2' : 'friend1'\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  onChangeUpdateState(event) {\n    this.setState({\n      identity: event.target.value\n    })\n  }\n\n  typePassword(event) {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  authorize(event) {\n    event.preventDefault();\n\n    if (this.state.password == process.env.REACT_APP_SECRET) {\n      this.setState({\n        authorized: true,\n        status: 'offline'\n      })\n    } else {\n      this.setState({\n        status: 'unauthorized'\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.authorized\n          ? <div>\n            { \n              this.state.ready\n              ? <button \n                  onMouseDown={this.connect} \n                  onMouseUp={this.disconnect}>\n                    Press to Talk\n                </button> \n              : <div>\n                  <p>Enter your name to begin.</p>\n                  <form onSubmit={this.setup}>\n                    <input \n                      type=\"text\" \n                      value={this.state.identity}\n                      onChange={this.onChangeUpdateState}\n                      placeholder=\"What's your name?\"></input>\n                    <input type=\"submit\" value=\"Begin Session\"></input>\n                  </form>\n                </div>\n            }\n            </div>\n          : <form onSubmit={this.authorize}>\n              <input \n                type=\"password\" \n                value={this.state.password}\n                onChange={this.typePassword}\n                placeholder=\"Password\"></input>\n              <input type=\"submit\" value=\"Enter Password\"></input>\n            </form>\n        }\n        <p>{ this.state.status }</p>\n\n\n        \n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}